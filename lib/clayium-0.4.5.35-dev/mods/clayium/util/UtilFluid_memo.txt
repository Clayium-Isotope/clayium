From 0.4.6.36 's one

+   public static void log(String message) {
+       if (ClayiumCore.cfgVerboseLoggingForFluidIDLoader)
+           ClayiumCore.logger.info("[FluidID Loader] " + message);
+   }

    public static void loadMapsFromConfig(Configuration cfg) {
        boolean error = false;
        HashBiMap<Integer, String> hashBiMap1 = HashBiMap.create();
        HashBiMap<Fluid, Integer> hashBiMap2 = HashBiMap.create();
        HashBiMap<Integer, String> hashBiMap3 = HashBiMap.create();
        cfgFluidIDs = cfg;
        log("Started to load FluidID.");
        if (cfgFluidIDs != null && cfgFluidIDs.hasCategory("fluid") && cfgFluidIDs.getCategory("fluid").containsKey("IDsForCapsule")) {
            String[] cfgs = cfgFluidIDs.getStringList("IDsForCapsule", "fluid", new String[0], "ID Map for Clay Fluid Capsule.");

            for (String s : cfgs) {
                String[] result = Iterables.toArray(splitter.split(s), String.class);
                if (result != null && result.length == 2) {
                    hashBiMap3.put(Integer.parseInt(result[0]), result[1]);
                    hashBiMap1.put(Integer.parseInt(result[0]), result[1]);
                }
            }
            log("Loading FluidID from cfg.");
            log("  List of FluidIDs in cfg");
            for (Map.Entry<Integer, String> entry : hashBiMap1.entrySet()) {
                String fluidName = entry.getValue();
                int newID = entry.getKey();
                log("    FluidID = " + newID + ", Fluid Name = " + fluidName);
            }
            log("  List of loaded FluidIDs");
            for (Map.Entry<Integer, String> entry : fluidNames.entrySet()) {
                String fluidName = entry.getValue();
                int newID = entry.getKey();
                log("    FluidID = " + newID + ", Fluid Name = " + fluidName);
            }

            log("Scanning already loaded Fluid list");

            for (Map.Entry<Integer, String> entry : fluidNames.entrySet()) {
                String fluidName = entry.getValue();
                int oldID = entry.getKey();
                int newID = oldID;
                log("  Checking FluidID = " + newID + ", Fluid Name = " + fluidName);

                if (hashBiMap3.containsValue(fluidName)) {
                    newID = hashBiMap1.inverse().get(fluidName);
                    log("    Found in cfg. Set FluidID to " + newID);
                } else {
                    while (hashBiMap1.containsKey(newID)) newID++;
                    hashBiMap1.put(newID, fluidName);
                    log("    Not found in cfg. Set FluidID to " + newID);
                }

                Fluid fluid = fluidIDs.inverse().get(oldID);

>               try {
>                   hashBiMap2.put(fluid, newID);
>               } catch (IllegalArgumentException e) {
>                   ClayiumCore.logger.error("[FluidID Loader] " + e.getMessage());
>                   error = true;
>               }
            }

            fluidNames = hashBiMap1;
            fluidIDs = hashBiMap2;
        }

        log("Done.");
        if (error) {
            ClayiumCore.logger.error("[FluidID Loader] An exception occurred. The FluidID database may be corrupted.");
            ClayiumCore.logger.error("Enable B:VerboseLoggingForFluidIDLoader to get more information.");
        }
    }

    protected static boolean registerFluid(Fluid fluid, int fluidID, boolean overrideFluidID) {
        while (fluidIDs.containsValue(fluidID)) {
            fluidID++;
        }
        String fluidName = fluid.getName();
        if (fluidNames.containsValue(fluidName)) {
            if (overridableNames.contains(fluidName)) {
>               if (overrideFluidID) {
>                   int oldID = fluidNames.inverse().get(fluidName);
>                   fluidIDs.inverse().remove(oldID);
>                   fluidNames.remove(oldID);
>               } else {
>                   return false;
>               }
            } else {
                fluidID = fluidNames.inverse().get(fluidName);
                if (fluidIDs.inverse().containsKey(fluidID))
                    fluidIDs.inverse().remove(fluidID);
                fluidIDs.put(fluid, fluidID);
                return true;
            }
        }
        fluidIDs.put(fluid, fluidID);
        fluidNames.put(fluidID, fluidName);
        return true;
    }